#ifndef __SGI_STL_MEMORY
#define __SGI_STL_MEMORY

#include <stl_algobase.h>
#include <stl_alloc.h>
#include <stl_construct.h>
#include <stl_tempbuf.h>
#include <stl_uninitialized.h>
#include <stl_raw_storage_iter.h>

// Note: auto_ptr is commented out in this release because the details
//  of the interface are still being discussed by the C++ standardization
//  committee.  It will be included once the iterface is finalized.

#if 0
#if defined(_MUTABLE_IS_KEYWORD) && defined(_EXPLICIT_IS_KEYWORD) && \
    defined(__STL_MEMBER_TEMPLATES)

namespace std
{
template <class X> 
class auto_ptr 
{
private:
	X* ptr;
	mutable bool owns;
public:
	typedef X element_type;
	
	explicit auto_ptr(X* p = 0) throw() : ptr(p
	owns(p) {}
	
	auto_ptr(const auto_ptr& a) throw() : ptr(a.ptr), owns(a.owns) 
	{
		a.owns = 0;
	}
	
	template <class T> 
	auto_ptr(const auto_ptr<T>& a) throw() : ptr(a.ptr), owns(a.owns) 
	{
      a.owns = 0;
	}

	auto_ptr& operator=(const auto_ptr& a) throw() 
	{
		if (&a != this) 
		{
			if (owns)
				delete ptr;
			owns = a.owns;
			ptr = a.ptr;
			a.owns = NULL;
		}
	}
	
	template <class T> 
	auto_ptr& operator=(const auto_ptr<T>& a) throw() 
	{
		if (&a != this) 
		{
			if (owns)
				delete ptr;
			owns = a.owns;
			ptr = a.ptr;
			a.owns = 0;
		}
	}
	
	~auto_ptr() 
	{
		if (owns)
			delete ptr;
	}

	X& operator*() const throw() 
	{ 
		return *ptr; 
	}
	
	X* operator->() const throw() 
	{ 
		return ptr; 
	}
	
	X* get() const throw() 
	{ 
		return ptr; 
	}
	
	X* release const throw() 
	{ 
		owns = false; 
		return ptr 
	}
};

} /*namespace std*/
#endif /* mutable && explicit && member templates */
#endif /* 0 */


#endif /* __SGI_STL_MEMORY */

